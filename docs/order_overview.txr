Orders Overview
Detailed instructions for creating, placing, and managing orders using Polymarket’s CLOB API.

All orders are expressed as limit orders (can be marketable). The underlying order primitive must be in the form expected and executable by the on-chain binary limit order protocol contract. Preparing such an order is quite involved (structuring, hashing, signing), thus Polymarket suggests using the open source typescript, python and golang libraries.

​
Allowances
To place an order, allowances must be set by the funder address for the specified maker asset for the Exchange contract. When buying, this means the funder must have set a USDC allowance greater than or equal to the spending amount. When selling, the funder must have set an allowance for the conditional token that is greater than or equal to the selling amount. This allows the Exchange contract to execute settlement according to the signed order instructions created by a user and matched by the operator.

​
Signature Types
Polymarket’s CLOB supports 3 signature types. Orders must identify what signature type they use. The available typescript and python clients abstract the complexity of signing and preparing orders with the following signature types by allowing a funder address and signer type to be specified on initialization. The supported signature types are:

Type	ID	Description
EOA	0	EIP712 signature signed by an EOA
POLY_PROXY	1	EIP712 signatures signed by a signer associated with funding Polymarket proxy wallet
POLY_GNOSIS_SAFE	2	EIP712 signatures signed by a signer associated with funding Polymarket gnosis safe wallet
​
Validity Checks
Orders are continually monitored to make sure they remain valid. Specifically, this includes continually tracking underlying balances, allowances and on-chain order cancellations. Any maker that is caught intentionally abusing these checks (which are essentially real time) will be blacklisted.

Additionally, there are rails on order placement in a market. Specifically, you can only place orders that sum to less than or equal to your available balance for each market. For example if you have 500 USDC in your funding wallet, you can place one order to buy 1000 YES in marketA @ $.50, then any additional buy orders to that market will be rejected since your entire balance is reserved for the first (and only) buy order. More explicitly the max size you can place for an order is:

maxOrderSize
=
underlyingAssetBalance
−
∑
(
orderSize
−
orderFillAmount
)
maxOrderSize=underlyingAssetBalance−∑(orderSize−orderFillAmount)


Cancel Orders(s)
Multiple endpoints to cancel a single order, multiple orders, all orders or all orders from a single market.

​
Cancel an single Order
This endpoint requires a L2 Header.
Cancel an order.

HTTP REQUEST

DELETE /<clob-endpoint>/order

​
Request Payload Parameters
Name	Required	Type	Description
orderID	yes	string	ID of order to cancel
​
Response Format
Name	Type	Description
canceled	string[]	list of canceled orders
not_canceled		a order id -> reason map that explains why that order couldn’t be canceled

Python

Typescript

Copy

Ask AI
resp = client.cancel(order_id="0x38a73eed1e6d177545e9ab027abddfb7e08dbe975fa777123b1752d203d6ac88")
print(resp)
​
Cancel Multiple Orders
This endpoint requires a L2 Header.
HTTP REQUEST

DELETE /<clob-endpoint>/orders

​
Request Payload Parameters
Name	Required	Type	Description
null	yes	string[]	IDs of the orders to cancel
​
Response Format
Name	Type	Description
canceled	string[]	list of canceled orders
not_canceled		a order id -> reason map that explains why that order couldn’t be canceled

Python

Typescript

Copy

Ask AI
resp = client.cancel_orders(["0x38a73eed1e6d177545e9ab027abddfb7e08dbe975fa777123b1752d203d6ac88", "0xaaaa..."])
print(resp)
​
Cancel ALL Orders
This endpoint requires a L2 Header.
Cancel all open orders posted by a user.

HTTP REQUEST

DELETE /<clob-endpoint>/cancel-all

​
Response Format
Name	Type	Description
canceled	string[]	list of canceled orders
not_canceled		a order id -> reason map that explains why that order couldn’t be canceled

Python

Typescript

Copy

Ask AI
resp = client.cancel_all()
print(resp)
print("Done!")
​
Cancel orders from market
This endpoint requires a L2 Header.
Cancel orders from market.

HTTP REQUEST

DELETE /<clob-endpoint>/cancel-market-orders

​
Request Payload Parameters
Name	Required	Type	Description
market	no	string	condition id of the market
asset_id	no	string	id of the asset/token
​
Response Format
Name	Type	Description
canceled	string[]	list of canceled orders
not_canceled		a order id -> reason map that explains why that order couldn’t be canceled

Python

Typescript

Copy

Ask AI
resp = client.cancel_market_orders(market="0xbd31dc8a20211944f6b70f31557f1001557b59905b7738480ca09bd4532f84af", asset_id="52114319501245915516055106046884209969926127482827954674443846427813813222426")
print(resp)